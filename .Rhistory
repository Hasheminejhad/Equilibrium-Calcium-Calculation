CO3_initial <- input$CO3_initial
# Convert to mol/L (assuming molar masses: Ca = 40.08 g/mol, CO3 = 60.01 g/mol)
Ca_initial_mol <- Ca_initial / 40.08 / 1000  # mol/L
CO3_initial_mol <- CO3_initial / 60.01 / 1000  # mol/L
# Calculate the ion activity product (IAP)
IAP <- Ca_initial_mol * CO3_initial_mol
# Calculate the Saturation Index (SI)
SI <- log10(IAP / K_sp)
# Initialize final concentrations
final_concentration <- sqrt(K_sp)
Ca_final_mol <- final_concentration
CO3_final_mol <- final_concentration
# Calculate the final concentrations in mg/L
Ca_final <- Ca_final_mol * 40.08 * 1000  # mg/L
CO3_final <- CO3_final_mol * 60.01 * 1000  # mg/L
# Determine the amount of calcite precipitated or dissolved
if (SI > 0) {
# Precipitation: Amount of calcite precipitated (mol)
calcite_precipitated_mol <- Ca_initial_mol - Ca_final_mol
# Convert to grams
calcite_precipitated_grams <- calcite_precipitated_mol * 100.09  # g (mol * molar mass of CaCO3)
output$result <- renderText({
paste("Oversaturated: Precipitation occurs",
"\nFinal concentration of Ca²⁺ (mg/L):", round(Ca_final, 2),
"\nFinal concentration of CO₃²⁻ (mg/L):", round(CO3_final, 2))
})
output$calcite_amount <- renderText({
paste("Amount of calcite precipitated (mol):", round(calcite_precipitated_mol, 5),
"\nAmount of calcite precipitated (g):", round(calcite_precipitated_grams, 4))
})
} else if (SI < 0) {
# Dissolution: Amount of calcite dissolved (mol)
calcite_dissolved_mol <- Ca_final_mol - Ca_initial_mol
# Convert to grams
calcite_dissolved_grams <- calcite_dissolved_mol * 100.09  # g (mol * molar mass of CaCO3)
output$result <- renderText({
paste("Undersaturated: Dissolution occurs",
"\nFinal concentration of Ca²⁺ (mg/L):", round(Ca_final, 2),
"\nFinal concentration of CO₃²⁻ (mg/L):", round(CO3_final, 2))
})
output$calcite_amount <- renderText({
paste("Amount of calcite dissolved (mol):", round(calcite_dissolved_mol, 5),
"\nAmount of calcite dissolved (g):", round(calcite_dissolved_grams, 4))
})
} else {
# At equilibrium
output$result <- renderText({
paste("At equilibrium: No change in concentrations",
"\nFinal concentration of Ca²⁺ (mg/L):", round(Ca_initial, 2),
"\nFinal concentration of CO₃²⁻ (mg/L):", round(CO3_initial, 2))
})
output$calcite_amount <- renderText({
paste("Amount of calcite precipitated or dissolved: 0 g")
})
}
# Add the contact information to the output
output$contact_info <- renderText({
paste("\n\nContact Information:",
"\nYousef Hasheminejhad",
"\nSalinity Research Academic Staff (PhD)",
"\nSoil Physics and Conservation",
"\nHead, Sabzevar Agricultural and Natural Resources Research and Education Station",
"\nEmail: Hasheminejhad@gmail.com")
})
})
}
# Run the application
shinyApp(ui = ui, server = server)
rsconnect::deployApp()
library(shiny)
library(dplyr)
# Define the UI
ui <- fluidPage(
titlePanel("Calculate Ca_eq for Cation Data"),
sidebarLayout(
sidebarPanel(
fileInput("input_file", "Upload CSV File", accept = ".csv"),
numericInput("default_HCO3", "Default HCO₃ (meq/L, if missing in file):", value = 3.0),
actionButton("process", "Calculate Ca_eq"),
downloadButton("download_file", "Download Updated File")
),
mainPanel(
tableOutput("preview_data")
)
)
)
# Define the server logic
server <- function(input, output, session) {
# Function to calculate SC (sum of cations in meq/L)
calculate_SC <- function(Na, Ca, Mg) {
SC <- Na + Ca + Mg
return(SC)
}
# Function to calculate Is (Ionic Strength)
calculate_Is <- function(SC) {
Is <- (1.3477 * SC * 0.5355) / 1000
return(Is)
}
# Function to calculate log(X)
calculate_logX <- function(Is, Ca, HCO3) {
logX <- (1 / 3) * (
4.6629 +
(0.6103 * log10(Is)) +
(0.0844 * (log10(Is)^2)) +
(2 * log10(Ca / (2 * HCO3)))
)
return(logX)
}
# Function to calculate Ca_eq
calculate_caeq <- function(Na, Ca, Mg, HCO3, PCO2 = 0.0007) {
# Calculate SC
SC <- calculate_SC(Na, Ca, Mg)
# Calculate Is
Is <- calculate_Is(SC)
# Calculate log(X)
logX <- calculate_logX(Is, Ca, HCO3)
# Calculate Ca_eq
Ca_eq <- 2 * 10^(logX * (PCO2^(1/3)))
return(Ca_eq)
}
# Reactive values to store processed data
processed_data <- reactiveVal(NULL)
# Observe when "process" button is clicked
observeEvent(input$process, {
req(input$input_file)
file <- input$input_file$datapath
# Read data from uploaded file
data <- read.csv(file)
# Ensure HCO3 column exists; if not, add default value
if (!"HCO3" %in% colnames(data)) {
data$HCO3 <- input$default_HCO3
}
# Calculate Ca_eq for each row and add it as a new column
data <- data %>%
rowwise() %>%
mutate(
Ca_eq = calculate_caeq(Na, Ca, Mg, HCO3)
) %>%
ungroup()
# Save processed data
processed_data(data)
})
# Display a preview of the processed data
output$preview_data <- renderTable({
req(processed_data())
head(processed_data(), 10)  # Show first 10 rows
})
# Enable file download
output$download_file <- downloadHandler(
filename = function() {
"cation_data_with_Caeq.csv"
},
content = function(file) {
write.csv(processed_data(), file, row.names = FALSE)
}
)
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
# Define the UI
ui <- fluidPage(
titlePanel("Calculate Ca_eq for Cation Data"),
sidebarLayout(
sidebarPanel(
numericInput("Na", "Sodium (Na) in meq/L:", value = 1.0, min = 0),
numericInput("Ca", "Calcium (Ca) in meq/L:", value = 1.0, min = 0),
numericInput("Mg", "Magnesium (Mg) in meq/L:", value = 1.0, min = 0),
numericInput("HCO3", "Bicarbonate (HCO₃) in meq/L:", value = 3.0, min = 0),
actionButton("calculate", "Calculate Ca_eq")
),
mainPanel(
tableOutput("results")
)
)
)
# Define the server logic
server <- function(input, output, session) {
# Function to calculate SC (sum of cations in meq/L)
calculate_SC <- function(Na, Ca, Mg) {
SC <- Na + Ca + Mg
return(SC)
}
# Function to calculate Is (Ionic Strength)
calculate_Is <- function(SC) {
Is <- (1.3477 * SC * 0.5355) / 1000
return(Is)
}
# Function to calculate log(X)
calculate_logX <- function(Is, Ca, HCO3) {
logX <- (1 / 3) * (
4.6629 +
(0.6103 * log10(Is)) +
(0.0844 * (log10(Is)^2)) +
(2 * log10(Ca / (2 * HCO3)))
)
return(logX)
}
# Function to calculate Ca_eq
calculate_caeq <- function(Na, Ca, Mg, HCO3, PCO2 = 0.0007) {
# Calculate SC
SC <- calculate_SC(Na, Ca, Mg)
# Calculate Is
Is <- calculate_Is(SC)
# Calculate log(X)
logX <- calculate_logX(Is, Ca, HCO3)
# Calculate Ca_eq
Ca_eq <- 2 * 10^(logX * (PCO2^(1/3)))
return(Ca_eq)
}
# Reactive to calculate results
results <- eventReactive(input$calculate, {
req(input$Na, input$Ca, input$Mg, input$HCO3)
# Calculate Ca_eq
Ca_eq <- calculate_caeq(input$Na, input$Ca, input$Mg, input$HCO3)
# Return results as a data frame for display
data.frame(
Parameter = c("Na", "Ca", "Mg", "HCO₃", "Calculated Ca_eq"),
Value = c(input$Na, input$Ca, input$Mg, input$HCO3, round(Ca_eq, 4)),
Unit = c("meq/L", "meq/L", "meq/L", "meq/L", "meq/L")
)
})
# Render the results table
output$results <- renderTable({
req(results())
results()
})
}
# Run the application
shinyApp(ui = ui, server = server)
setwd ("D:/Pistachio R/Caeq")
rsconnect::deployApp()
rsconnect::setAccountInfo(name='argbso-yousef-hashemi', token='2735CF8F7F015EB84ABD9781516F5CD9', secret='MnJLfWkTur7XVH0rxpgOUthcNOWjHmcWGhdWKPzh')
setwd ("D:/Pistachio R/Caeq")
rsconnect::deployApp()
library(shiny)
library(dplyr)
# Define the UI
ui <- fluidPage(
titlePanel("Calculate Ca_eq for Cation Data"),
sidebarLayout(
sidebarPanel(
fileInput("input_file", "Upload CSV File", accept = ".csv"),
numericInput("default_HCO3", "Default HCO₃ (meq/L, if missing in file):", value = 3.0),
actionButton("process", "Calculate Ca_eq"),
downloadButton("download_file", "Download Updated File")
),
mainPanel(
tableOutput("preview_data")
)
)
)
# Define the server logic
server <- function(input, output, session) {
# Function to calculate SC (sum of cations in meq/L)
calculate_SC <- function(Na, Ca, Mg) {
SC <- Na + Ca + Mg
return(SC)
}
# Function to calculate Is (Ionic Strength)
calculate_Is <- function(SC) {
Is <- (1.3477 * SC * 0.5355) / 1000
return(Is)
}
# Function to calculate log(X)
calculate_logX <- function(Is, Ca, HCO3) {
logX <- (1 / 3) * (
4.6629 +
(0.6103 * log10(Is)) +
(0.0844 * (log10(Is)^2)) +
(2 * log10(Ca / (2 * HCO3)))
)
return(logX)
}
# Function to calculate Ca_eq
calculate_caeq <- function(Na, Ca, Mg, HCO3, PCO2 = 0.0007) {
# Calculate SC
SC <- calculate_SC(Na, Ca, Mg)
# Calculate Is
Is <- calculate_Is(SC)
# Calculate log(X)
logX <- calculate_logX(Is, Ca, HCO3)
# Calculate Ca_eq
Ca_eq <- 2 * 10^(logX * (PCO2^(1/3)))
return(Ca_eq)
}
# Reactive values to store processed data
processed_data <- reactiveVal(NULL)
# Observe when "process" button is clicked
observeEvent(input$process, {
req(input$input_file)
file <- input$input_file$datapath
# Read data from uploaded file
data <- read.csv(file)
# Ensure HCO3 column exists; if not, add default value
if (!"HCO3" %in% colnames(data)) {
data$HCO3 <- input$default_HCO3
}
# Calculate Ca_eq for each row and add it as a new column
data <- data %>%
rowwise() %>%
mutate(
Ca_eq = calculate_caeq(Na, Ca, Mg, HCO3)
) %>%
ungroup()
# Save processed data
processed_data(data)
})
# Display a preview of the processed data
output$preview_data <- renderTable({
req(processed_data())
head(processed_data(), 10)  # Show first 10 rows
})
# Enable file download
output$download_file <- downloadHandler(
filename = function() {
"cation_data_with_Caeq.csv"
},
content = function(file) {
write.csv(processed_data(), file, row.names = FALSE)
}
)
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
# Define the UI
ui <- fluidPage(
titlePanel("Calculate Ca_eq for Cation Data"),
sidebarLayout(
sidebarPanel(
numericInput("Na", "Sodium (Na) in meq/L:", value = 1.0, min = 0),
numericInput("Ca", "Calcium (Ca) in meq/L:", value = 1.0, min = 0),
numericInput("Mg", "Magnesium (Mg) in meq/L:", value = 1.0, min = 0),
numericInput("HCO3", "Bicarbonate (HCO₃) in meq/L:", value = 3.0, min = 0),
actionButton("calculate", "Calculate Ca_eq")
),
mainPanel(
tableOutput("results")
)
)
)
# Define the server logic
server <- function(input, output, session) {
# Function to calculate SC (sum of cations in meq/L)
calculate_SC <- function(Na, Ca, Mg) {
SC <- Na + Ca + Mg
return(SC)
}
# Function to calculate Is (Ionic Strength)
calculate_Is <- function(SC) {
Is <- (1.3477 * SC * 0.5355) / 1000
return(Is)
}
# Function to calculate log(X)
calculate_logX <- function(Is, Ca, HCO3) {
logX <- (1 / 3) * (
4.6629 +
(0.6103 * log10(Is)) +
(0.0844 * (log10(Is)^2)) +
(2 * log10(Ca / (2 * HCO3)))
)
return(logX)
}
# Function to calculate Ca_eq
calculate_caeq <- function(Na, Ca, Mg, HCO3, PCO2 = 0.0007) {
# Calculate SC
SC <- calculate_SC(Na, Ca, Mg)
# Calculate Is
Is <- calculate_Is(SC)
# Calculate log(X)
logX <- calculate_logX(Is, Ca, HCO3)
# Calculate Ca_eq
Ca_eq <- 2 * 10^(logX * (PCO2^(1/3)))
return(Ca_eq)
}
# Reactive to calculate results
results <- eventReactive(input$calculate, {
req(input$Na, input$Ca, input$Mg, input$HCO3)
# Calculate Ca_eq
Ca_eq <- calculate_caeq(input$Na, input$Ca, input$Mg, input$HCO3)
# Return results as a data frame for display
data.frame(
Parameter = c("Na", "Ca", "Mg", "HCO₃", "Calculated Ca_eq"),
Value = c(input$Na, input$Ca, input$Mg, input$HCO3, round(Ca_eq, 4)),
Unit = c("meq/L", "meq/L", "meq/L", "meq/L", "meq/L")
)
})
# Render the results table
output$results <- renderTable({
req(results())
results()
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(dplyr)
# Define the UI
ui <- fluidPage(
titlePanel("Calculate Ca_eq for Cation Data"),
sidebarLayout(
sidebarPanel(
tabsetPanel(
id = "input_mode",
type = "tabs",
# Tab for manual input
tabPanel("Manual Input",
numericInput("Na", "Sodium (Na) in meq/L:", value = 1.0, min = 0),
numericInput("Ca", "Calcium (Ca) in meq/L:", value = 1.0, min = 0),
numericInput("Mg", "Magnesium (Mg) in meq/L:", value = 1.0, min = 0),
numericInput("HCO3", "Bicarbonate (HCO₃) in meq/L:", value = 3.0, min = 0),
actionButton("calculate_manual", "Calculate Ca_eq")
),
# Tab for CSV input
tabPanel("CSV Input",
fileInput("csv_file", "Upload CSV File",
accept = c(".csv")),
actionButton("process_csv", "Process CSV")
)
)
),
mainPanel(
tableOutput("results"),
downloadButton("download_csv", "Download Results as CSV")
)
)
)
# Define the server logic
server <- function(input, output, session) {
# Function to calculate SC (sum of cations in meq/L)
calculate_SC <- function(Na, Ca, Mg) {
SC <- Na + Ca + Mg
return(SC)
}
# Function to calculate Is (Ionic Strength)
calculate_Is <- function(SC) {
Is <- (1.3477 * SC * 0.5355) / 1000
return(Is)
}
# Function to calculate log(X)
calculate_logX <- function(Is, Ca, HCO3) {
logX <- (1 / 3) * (
4.6629 +
(0.6103 * log10(Is)) +
(0.0844 * (log10(Is)^2)) +
(2 * log10(Ca / (2 * HCO3)))
)
return(logX)
}
# Function to calculate Ca_eq
calculate_caeq <- function(Na, Ca, Mg, HCO3, PCO2 = 0.0007) {
# Calculate SC
SC <- calculate_SC(Na, Ca, Mg)
# Calculate Is
Is <- calculate_Is(SC)
# Calculate log(X)
logX <- calculate_logX(Is, Ca, HCO3)
# Calculate Ca_eq
Ca_eq <- 2 * 10^(logX * (PCO2^(1/3)))
return(Ca_eq)
}
# Reactive values to store results
results <- reactiveVal(data.frame())
# Manual input processing
observeEvent(input$calculate_manual, {
req(input$Na, input$Ca, input$Mg, input$HCO3)
# Calculate Ca_eq
Ca_eq <- calculate_caeq(input$Na, input$Ca, input$Mg, input$HCO3)
# Create a result table
result_table <- data.frame(
Parameter = c("Na", "Ca", "Mg", "HCO₃", "Calculated Ca_eq"),
Value = c(input$Na, input$Ca, input$Mg, input$HCO3, round(Ca_eq, 4)),
Unit = c("meq/L", "meq/L", "meq/L", "meq/L", "meq/L")
)
# Store results
results(result_table)
})
# CSV file processing
observeEvent(input$process_csv, {
req(input$csv_file)
# Read the uploaded CSV file
input_data <- read.csv(input$csv_file$datapath)
# Ensure all necessary columns exist
req(all(c("Na", "Ca", "Mg", "HCO3") %in% colnames(input_data)))
# Calculate Ca_eq for each row
processed_data <- input_data %>%
rowwise() %>%
mutate(
Ca_eq = calculate_caeq(Na, Ca, Mg, HCO3)
) %>%
ungroup()
# Store results
results(processed_data)
})
# Render results table
output$results <- renderTable({
req(results())
results()
})
# Download handler for CSV
output$download_csv <- downloadHandler(
filename = function() {
paste("cation_data_with_Ca_eq", Sys.Date(), ".csv", sep = "")
},
content = function(file) {
write.csv(results(), file, row.names = FALSE)
}
)
}
# Run the application
shinyApp(ui = ui, server = server)
